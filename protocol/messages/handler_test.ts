import { createRandomConfig } from "../../config/testing.ts";
import { DefaultMessageHandler } from "./handler.ts";
import { MessageHandlerContext } from "./handler_context.ts";
import {
  createRandomPeer,
  createRandomPeerStore,
} from "../../peers/testing.ts";
import { hexToBytes } from "../../_utils/hex.ts";
import { assertRejects } from "../../test_deps.ts";
import { BadMagicBytesError, UnsupportedMessageCodeError } from "../errors.ts";

Deno.test("[protocol/messages/handler] Handler should throw if magic bytes aren't correct", async () => {
  const ctx: MessageHandlerContext = {
    peerStore: createRandomPeerStore(),
    config: createRandomConfig(),
  };
  const handler = new DefaultMessageHandler(ctx);
  const msgHex =

  const msg = hexToBytes(msgHex);
  const peer = createRandomPeer();

  await assertRejects(
    () => handler.handle(msg, peer),
    BadMagicBytesError,
  );
});

Deno.test("[protocol/messages/handler] Handler should throw if message code is unsupported", async () => {
  const ctx: MessageHandlerContext = {
    peerStore: createRandomPeerStore(),
    config: createRandomConfig(),
  };
  const handler = new DefaultMessageHandler(ctx);
  const msgHex =

  const msg = hexToBytes(msgHex);
  const peer = createRandomPeer();

  await assertRejects(
    () => handler.handle(msg, peer),
    UnsupportedMessageCodeError,
  );
});
