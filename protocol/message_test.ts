import { assert, assertEquals, assertThrows } from "../test_deps.ts";
import { ScorexReader, ScorexWriter } from "../io/scorex_buffer.ts";
import { bytesToHex, hexToBytes } from "../_utils/hex.ts";
import { RawNetworkMessage } from "./message.ts";
import { MaliciousBehaviourError } from "./errors.ts";

Deno.test("[protocol/message] RawNetworkMessage.encode", () => {
  const msg = new RawNetworkMessage({
    magicBytes: new Uint8Array([2, 0, 2, 3]),
    code: 2,
    bodyLength: 1098,
    checksum: new Uint8Array([193, 202, 176, 103]),
    body: new Uint8Array(1098),
  });
  const buffer = msg.encode();

  assert(bytesToHex(buffer).startsWith("02000203020000044ac1cab067"));
});

/** Real message recorded during reference client execution */
Deno.test("[protocol/message] RawNetworkMessage decodes", async () => {
  const hexData =

  const bytes = hexToBytes(hexData);
  const reader = await ScorexReader.create(bytes);
  const msg = RawNetworkMessage.decode(reader);

  assertEquals(msg.magicBytes, new Uint8Array([2, 0, 2, 3])); // testnet
  assertEquals(msg.code, 2); // `Peers` message
  assertEquals(msg.bodyLength, 1098);
  assertEquals(msg.checksum, new Uint8Array([193, 202, 176, 103]));
});

Deno.test("[protocol/message] RawNetworkMessage.decode throws MaliciousBehaviourError when byte length less than header length", async () => {
  const bytes = new Uint8Array(5);
  const reader = await ScorexReader.create(bytes);

  assertThrows(
    () => RawNetworkMessage.decode(reader),
    MaliciousBehaviourError,
    "Raw network message length is less than expected header length",
  );
});

Deno.test("[protocol/message] RawNetworkMessage.decode throws MaliciousBehaviourError when checksum is incorrect", async () => {
  const hexData =

  const bytes = hexToBytes(hexData);
  const reader = await ScorexReader.create(bytes);

  assertThrows(
    () => RawNetworkMessage.decode(reader),
    MaliciousBehaviourError,
    "Invalid checksum for message body",
  );
});

Deno.test("[protocol/message] RawNetworkMessage.decode throws MaliciousBehaviourError when body length is negative int", async () => {
  const msg = new RawNetworkMessage({
    magicBytes: new Uint8Array([2, 0, 3, 2]),
    code: 2,
    bodyLength: 42949672951111,
    body: new Uint8Array(500),
    checksum: new Uint8Array([]),
  });
  const writer = await ScorexWriter.create();
  msg.encode(writer);
  const reader = await ScorexReader.create(writer.buffer);

  assertThrows(
    () => RawNetworkMessage.decode(reader),
    MaliciousBehaviourError,
    "Body length must be a positive int",
  );
});
